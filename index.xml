<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Qiming's Blog</title><link>https://xqm32.github.io/</link><description>Recent content on Qiming's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 02 Mar 2022 11:37:40 +0800</lastBuildDate><atom:link href="https://xqm32.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>LeetCode</title><link>https://xqm32.github.io/leetcode/</link><pubDate>Tue, 08 Mar 2022 11:39:36 +0800</pubDate><guid>https://xqm32.github.io/leetcode/</guid><description>力扣每日一水。
2022.3.8 我太菜了，做了三个半小时😭
重点是不要遍历，在下面的代码里就用了 set() 来减少遍历。
代码原理请把注释去除在运行即可显示。
看题解 # # @lc app=leetcode.cn id=2055 lang=python3 # # [2055] 蜡烛之间的盘子 # from typing import List import fire from rich.console import Console console = Console() def stress(s: str, f: int, t: int, c: str) -&amp;gt; None: console.log(f&amp;#39;{s[:f]}[{c}]{s[f:t]}[/{c}]{s[t:]}&amp;#39;) # @lc code=start class Solution: def platesBetweenCandles(self, s: str, queries: List[List[int]]) -&amp;gt; List[int]: p, c, r = [], [], [] cp, pc, cc = set(), 0, 0 for i in range(0, len(s)): if s[i] == &amp;#39;*&amp;#39;: pc += 1 p.</description></item><item><title>笔记</title><link>https://xqm32.github.io/notes/</link><pubDate>Thu, 03 Mar 2022 17:22:09 +0800</pubDate><guid>https://xqm32.github.io/notes/</guid><description>此处存放着笔者想要留存，但内容较少，不适合新建一篇博客的内容。
配置 npm 镜像设置 腾讯解君愁。
Hugo 中嵌入 HTML 的方法 于 config.yml 中加入以下配置：
markup: goldmark: renderer: unsafe: true 参考 Hugo 文档 Goldmark 一栏。
unsafe
By default, Goldmark does not render raw HTMLs and potentially dangerous links. If you have lots of inline HTML and/or JavaScript, you may need to turn this on.
Hugo PaperMod 主题安装、更新方法 参考其教程即可 Hugo PaperMod。
Hugo PaperMod 本地查看静态页面异常 打开 public/index.html，查看控制台报错。
Access to CSS stylesheet at &amp;lsquo;file:///PATH/TO/FILE.</description></item><item><title>三阶魔方层先法还原教程</title><link>https://xqm32.github.io/posts/layer-by-layer-guide-of-cube/</link><pubDate>Wed, 02 Mar 2022 11:37:40 +0800</pubDate><guid>https://xqm32.github.io/posts/layer-by-layer-guide-of-cube/</guid><description>笔者编写此文的本意是为了记录和索引公式。其内容源于笔者经验，不免有所疏漏，还请读者于评论区指出。
笔者希望记忆方便，故本文主要使用汉字式公式，为确保无歧义，亦附有字母式公式作为参考。
公式索引 必须掌握的公式将加粗表示，不常用的公式将以灰色表示。
二层 [侧棱][正面] 左上右下右 逆左顺 - URU&amp;rsquo;R&amp;rsquo;U&amp;rsquo; F&amp;rsquo;UF [侧棱][右面] 下逆上左 下右上顺 - R&amp;rsquo;F&amp;rsquo;RU RU&amp;rsquo;R&amp;rsquo;F 三层 [顶棱][右手] 顺 左上右下 逆 - F URU&amp;rsquo;R&amp;rsquo; F&amp;rsquo; 二前四左：顶面空缺块个数和左下角块朝向。 [顶棱][左手] 逆 右上左下 顺 - F&amp;rsquo; U&amp;rsquo;L&amp;rsquo;UL F [小鱼][右手] 上左下左上左左下 - RUR&amp;rsquo;URU2R&amp;rsquo; 小鱼公式的鱼头应向下。 [小鱼][左手] 上右下右上右右下 - L&amp;rsquo;U&amp;rsquo;LU&amp;rsquo;L&amp;rsquo;U'2L [顶棱][右手] 左左上左左下顺顺 - U2RU2R&amp;rsquo;F2 [顶棱][左手] 左左上左左下顺顺 - U2L&amp;rsquo;U2LF2 汉英对照 左 - U 右 - U' 上 - R / L' 下 - R&amp;rsquo; / L 顺 - F 逆 - F' 参考资料 GAN 魔方的层先法教程 最简单的三阶魔方入门教程</description></item><item><title>朋友们</title><link>https://xqm32.github.io/friends/</link><pubDate>Tue, 01 Mar 2022 21:28:59 +0800</pubDate><guid>https://xqm32.github.io/friends/</guid><description>朋友们 👦 可爱的 RedContritio 酱
🐂 神犇 YKgsmUDq
⚓ 串串儿 Inko</description></item><item><title>TODO</title><link>https://xqm32.github.io/todo/</link><pubDate>Wed, 23 Feb 2022 20:27:36 +0800</pubDate><guid>https://xqm32.github.io/todo/</guid><description>Git 的变基 CloudFlare CDN 加速 PDF.js 索引 GitHub GitHub Pages 做 Wiki GitHub Actions 自动更新 GitHub Actions 自动评教 游戏 = [ ] 《微型战场》</description></item><item><title>Wordle</title><link>https://xqm32.github.io/wordle/</link><pubDate>Fri, 11 Feb 2022 00:09:44 +0800</pubDate><guid>https://xqm32.github.io/wordle/</guid><description>使用说明 点击拉取：拉取所有单词
点击剩余：计算剩余单词
状态按照颜色 w(white), y(yellow), g(green) 进行填写
提示： 拉取 | 撤销 | 重做 @ 单词： 状态： 剩余： // Wordle // Fix Bug: apple | yygwy | double 'p' historyWords = []; nowWords = -1; words = []; len = 0; fetchIt(); setInterval(()={ document.getElementById("nowWords").innerHTML = nowWords }, 1000) async function fetchIt() { await fetch("/des.txt").then((r) = r.text().then((t) = { words = t.split("\n"); }) ); len = words[0].</description></item><item><title>代码</title><link>https://xqm32.github.io/code/</link><pubDate>Thu, 10 Feb 2022 22:35:16 +0800</pubDate><guid>https://xqm32.github.io/code/</guid><description>import base64 def a(b): c = &amp;#39;6508b291b7172cadc9987137f8683f67&amp;#39; d = list(ord(i) for i in c) e = list(ord(i) for i in b) f = [] for i in range(0, len(b)): f.append((255 &amp;amp; e[i]) + (255 &amp;amp; d[i % 32])) g = &amp;#39;.&amp;#39; + &amp;#39;.&amp;#39;.join(list(str(i) for i in f)) return base64.b64encode(g.encode(&amp;#39;UTF-8&amp;#39;)).decode() import URLJS from 'url-js'; 加密： 结果：
// 加密 function ent(content) { md5 = "</description></item><item><title>为 Hugo 博客加入 Gitalk</title><link>https://xqm32.github.io/posts/add-gitalk-to-hugo/</link><pubDate>Sun, 09 Jan 2022 20:56:25 +0800</pubDate><guid>https://xqm32.github.io/posts/add-gitalk-to-hugo/</guid><description>一个好的博客往往需要评论区的支撑，但使用自建服务器做评论区显然有点略显奢侈了，而使用 Gitalk 搭建博客评论区显然是一个不错的选择。
加入 Gitalk 的方法 这里以 PaperMod 主题为例子，理论上也适用于其他主题，具体还请查阅所用主题的相关文档。
在 PaperMod 主题中，我们只需要在根目录下创建 layouts/partials/comments.html 文件即可（或者复制 themes/PaperMod/layouts/partials/comments.html 至根目录即可）。
此后，我们可以参照 Gitalk 文档，在 comments.html 加入如下内容：
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css&amp;#34;&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;div id=&amp;#34;gitalk-container&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; var gitalk = new Gitalk({ clientID: &amp;#39;GitHub Application Client ID&amp;#39;, clientSecret: &amp;#39;GitHub Application Client Secret&amp;#39;, repo: &amp;#39;GitHub repo&amp;#39;, // The repository of store comments, owner: &amp;#39;GitHub repo owner&amp;#39;, admin: [&amp;#39;GitHub repo owner and collaborators, only these guys can initialize github issues&amp;#39;], id: location.</description></item><item><title>关于我</title><link>https://xqm32.github.io/about/</link><pubDate>Mon, 03 Jan 2022 22:55:51 +0800</pubDate><guid>https://xqm32.github.io/about/</guid><description>朋友们</description></item><item><title>20211202</title><link>https://xqm32.github.io/20211202/</link><pubDate>Thu, 02 Dec 2021 16:32:50 +0800</pubDate><guid>https://xqm32.github.io/20211202/</guid><description>今天居然是一个对称的日期，做个彩蛋玩玩儿😛</description></item><item><title>WSL - VS Code 开发流配置</title><link>https://xqm32.github.io/posts/wsl-vscode/</link><pubDate>Tue, 30 Nov 2021 11:15:52 +0800</pubDate><guid>https://xqm32.github.io/posts/wsl-vscode/</guid><description>此前笔者已经写过一篇配置 WSL - VS Code 开发流配置相关的文章，然而微软给出了更加方便地配置方法，所以这里也给出配置的优化。
安装 WSL 由于微软的优化，现在我们只需要在 Powershell 中输入：
wsl --install 即可完成 Windows Subsystem for Linux 的安装，此命令会附加安装一个 Ubuntu 发行版，因而亦不需要在 Microsoft Store 中再次下载。
更换 WSL 的镜像源 国内访问 Ubuntu 的默认软件源速度较慢，因而我们需要更换一个镜像源以加快软件源的访问速度。这里以 USTC 的镜像源为例，只需在 WSL 终端中输入：
sudo sed -i &amp;#39;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&amp;#39; /etc/apt/sources.list 即可完成换源。
更新软件包 在 WSL 终端中输入：
sudo apt update sudo apt upgrade 即可更新。
其他 余下的步骤可以参考笔者之前的文章。</description></item><item><title>备份</title><link>https://xqm32.github.io/backup/</link><pubDate>Sat, 27 Nov 2021 20:48:15 +0800</pubDate><guid>https://xqm32.github.io/backup/</guid><description>一些“备份”，更类似于收藏夹。
软件 7-Zip
Everything
Sumatra PDF
iCloud
iTunes
Git
Visual Studio Code
Mark Text
QQ
Wechat
Minecraft
开发 适用于 Linux 的 Windows 子系统文档
The Java™ Tutorials
Java SE 17 &amp;amp; JDK 17
Java SE 参考资料
JavaScript | MDN</description></item><item><title>使用 WSL 和 VS Code 配置 C/C++ 开发环境</title><link>https://xqm32.github.io/posts/wsl-vscode-for-c-cpp/</link><pubDate>Fri, 26 Nov 2021 14:23:09 +0800</pubDate><guid>https://xqm32.github.io/posts/wsl-vscode-for-c-cpp/</guid><description>此文章已经过时，请参考微软给出的更新的教程 安装 WSL
本教程基于 在 Windows 10 上安装 WSL 和 开始使用 WSL VS Code 编写，笔者不保证内容的准确性。如有任何疑问，请参考微软有关 WSL 的官方文档。
启用 WSL（适用于 Linux 的 Windows 子系统） 以管理员身份打开 Powershell（可以右击 Windows 徽标键，并选择该项）并运行如下命令：
dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 如果想要更新到 WSL 2 请转到 更新至 WSL 2 。若希望直接使用 WSL 1 请直接 重新启动 并转到 安装并配置 Linux 发行版。
更新至 WSL 2 注意：若要更新至 WSL 2，请确保 Windows 10 已经达到以下运行要求：
对于 x64 系统：版本 1903 或更高版本，采用 内部版本 18362 或更高版本。 对于 ARM64 系统：版本 2004 或更高版本，采用 内部版本 19041 或更高版本。 低于 18362 的版本不支持 WSL 2。 使用 Windows Update 助手 更新 Windows 版本。 启用虚拟机功能 以管理员身份打开 Powershell 并运行如下命令：</description></item><item><title>Java 课程知识点总结</title><link>https://xqm32.github.io/posts/java-course-knowledge-points/</link><pubDate>Mon, 15 Nov 2021 13:15:31 +0800</pubDate><guid>https://xqm32.github.io/posts/java-course-knowledge-points/</guid><description>注意：本文是合肥工业大学软件工程专业《Java 语言程序设计》课程的知识点总结，基于课程老师给出的知识点总结，笔者不保证内容的准确性，请谨慎参考。
若文中存在任何问题或有任何疑问请前往 Issue 页面。
概述 Java 发展历史：
① 1990 年代初由 Sun 公司开发，最初被命名为 Oak，用于家用电器；
② 1995 年，Sun 改造了 Oak，以 Java 的名称正式发布，广泛应用于互联网。
J2ME、J2SE、J2EE：
J2ME：Java 2 Platform, Micro Edition，应用于嵌入式（embedded）及移动设备（mobile device）；
J2SE：Java 2 Platform, Standard Edition，应用于桌面（desktop）及服务器（server）环境；
J2EE：Java 2 Platform, Enterprise Edition，应用于分布式计算（distributed computing）及网络服务（web services），是 J2SE 的拓展。
Java 语言的特点：
开放、简单、健壮、安全、面向网络、完全的面向对象编程（OOP）、跨平台（WORA）；
WORA：Write One, Run Anywhere
Java 与 C++ 的比较：
① Java 无指针；
② Java 无结构体和联合体；
③ Java 无运算符重载；</description></item><item><title>使用 Github Actions 自动化部署 Hugo 博客</title><link>https://xqm32.github.io/posts/deploy-hugo-via-github-actions/</link><pubDate>Sat, 04 Sep 2021 19:47:57 +0800</pubDate><guid>https://xqm32.github.io/posts/deploy-hugo-via-github-actions/</guid><description>笔者一直想有个属于自己的博客，通过在网上不断搜索，笔者发现使用 Hugo 部署至 Github Pages 上是一个不错的选择。但是，这样的部署也有一个缺陷：需要手动生成部署文件，再上传至 Github，这是十分麻烦的。因此笔者又在网上搜索文档、文章，后来了解到，可以使用 Github Actions 进行自动化部署，我们只需要将网站源码推送至 Github 便可以自动化地生成博客网站。不过，虽然在操作上是方便了许多，但如何配置这样的自动化部署似乎依旧是一个复杂的问题。于是笔者继续在网上搜索文档和文章，但大部分都没有给出较为「官方」的解决方案，也很少有参考资料可供加深了解，故而笔者转向寻求 Hugo 文档 的帮助，最终做到了使用 Github Actions 自动化部署 Hugo 博客。
准备工作 首先，我们需要创建可以用于部署 Hugo 博客的 Github 仓库，具体的操作可以参考 GitHub Pages 文档 。
其次，我们需要在电脑上安装 Git 和 Hugo（注意：在 Linux，特别是 Ubuntu 上，请不要使用默认的包管理器安装 Hugo，此法安装的 Hugo 版本有时过低，会造成大量错误），请参考 此文档 进行安装。
之后，我们将使用 Hugo 在本地创建网站，名称建议使用 username.github.io（其中 username 是你的 Github ID），具体的方法请参照 此文档。
Github Actions 在完成准备工作后，我们需要在本地创建网站的文件夹中建立 .github/workflows/gh-pages.yml 文件，在其中填入（此代码参考 Hugo 文档中 Host on GitHub 一项）：
name: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.</description></item><item><title>C 语言实现字符串切片</title><link>https://xqm32.github.io/posts/slicing-string-in-c-language/</link><pubDate>Sat, 04 Sep 2021 16:35:51 +0800</pubDate><guid>https://xqm32.github.io/posts/slicing-string-in-c-language/</guid><description>搬运一篇笔者在知乎发的文章：C 语言实现字符串切片
基于 Python 的切片的格式实现的 C 语言字符串切片：
#include &amp;lt;ctype.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt; typedef long long SizeType; size_t fgetln(FILE* stream, char* dest, size_t size) { size_t i; for (i = 0, *dest = fgetc(stream); *dest != &amp;#39;\n&amp;#39; &amp;amp;&amp;amp; !feof(stream) &amp;amp;&amp;amp; --size &amp;gt; 0; ++i, *++dest = fgetc(stream)) ; *dest = &amp;#39;\0&amp;#39;; return i; } // 读取一行字符串。 size_t slice(char* from, char* to, SizeType begin, SizeType end, SizeType interval) { SizeType i; begin += begin &amp;lt; 0 ?</description></item></channel></rss>